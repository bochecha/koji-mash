#!/usr/bin/python2

# Copyright (c) 2013 - Mathieu Bridon
#
# This application is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This application is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this application.  If not, see <http://www.gnu.org/licenses/>.


import argparse
from ConfigParser import SafeConfigParser
import os
import sys

import koji


# FIXME: This is pretty disgusting
class Object(object): pass
kojicli_options = Object()
kojicli_options.poll_interval = 1
kojicli = {"__name__": "anything but __main__", "options": kojicli_options}
execfile("/usr/bin/koji", kojicli)
watch_tasks = kojicli["watch_tasks"]


DEFAULT_KOJI_CONFIG = "/etc/koji.conf"


def parse_args():
    parser = argparse.ArgumentParser()

    # Some common Koji options
    parser.add_argument("-c", "--config", default=DEFAULT_KOJI_CONFIG,
                        help=("The koji configuration file (default: %s)"
                              % DEFAULT_KOJI_CONFIG))
    parser.add_argument("--background", action="store_true", default=False,
                        help="Run the build at a lower priority")
    parser.add_argument("--nowait", action="store_false", dest="wait",
                        default=True, help="Don't wait on the mash task")

    # The mash options
    parser.add_argument("--mash-config", help="The mash config file to use")
    parser.add_argument("--mash-outputdir", dest="output_dir",
                        help="The output directory")
    parser.add_argument("--mash-previousdir", dest="previous_dir",
                        help="The path to the previous mash run, to use as a "
                             "basis for createrepo")
    parser.add_argument("--mash-deltadir", dest="delta_dir",
                        help="The path to the previous directory, to use for "
                             "deltarpm creation")
    parser.add_argument("--mash-compsfile", dest="comps_file",
                        help="The comps file to use when mashing")
    parser.add_argument("--mash-nodelta", action="store_false",
                        dest="do_delta", default=True,
                        help="Do not generate deltarpms")

    parser.add_argument("mash_target", help="The target (~ distribution) to "
                                            "mash")
    parser.add_argument("build_tag", help="The corresponding Koji build tag")

    return parser.parse_args()

def get_config(config_file):
    config = SafeConfigParser()
    config.read(config_file)

    # These options are often specified with a '~'
    for opt in ("cert", "ca", "serverca"):
        config.set("koji", opt, os.path.expanduser(config.get("koji", opt)))

    return config

def main(opts, args):
    session = koji.ClientSession(opts.get("koji", "server"))

    # TODO: Handle other authentication methods
    session.ssl_login(opts.get("koji", "cert"), opts.get("koji", "ca"),
                      opts.get("koji", "serverca"))

    mash_opts = {}
    for attr in ("mash_config", "output_dir", "previous_dir",
                 "delta_dir", "comps_file", "do_delta"):
        value = getattr(args, attr)
        if value is not None:
            mash_opts[attr] = value

    priority = 5 if args.background else None

    task_id = session.mash_tree(args.mash_target, args.build_tag, mash_opts,
                                priority)

    print("Created task: %d" % task_id)
    print("Task info: %s/taskinfo?taskID=%d" % (opts.get("koji", "weburl"),
                                                task_id))

    if args.wait:
        session.logout()
        return watch_tasks(session, [task_id])


if __name__ == "__main__":
    args = parse_args()
    opts = get_config(args.config)

    try:
        main(opts, args)

    except Exception as e:
        sys.stderr.write("Could not mash: %s\n" % e)
        sys.exit(1)

    sys.exit(0)
